<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Thacher Shields</title>
        <link>https://thacher.me/posts/</link>
        <description>Recent content in Posts on Thacher Shields</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 28 Jan 2024 16:40:30 -0500</lastBuildDate>
        <atom:link href="https://thacher.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Pushing Back on Product Partners</title>
            <link>https://thacher.me/posts/working-with-product/</link>
            <pubDate>Sun, 28 Jan 2024 16:40:30 -0500</pubDate>
            
            <guid>https://thacher.me/posts/working-with-product/</guid>
            <description>In my two years in the enterprise UX space, I&amp;rsquo;ve gained a number of soft skills that they didn&amp;rsquo;t prepare me for in college. At no point in my undergrad or masters programs did my instructors tell me that I&amp;rsquo;d have to tell people no. Learning that lesson took real on-the-job experience. Today, I&amp;rsquo;d like to talk about the relationship between product managers and UX designers.
The Relationship During my time as a Senior User Experience Designer, I&amp;rsquo;ve worked closely with several key stakeholders for each of my projects.</description>
            <content type="html"><![CDATA[<p>In my two years in the enterprise UX space, I&rsquo;ve gained a number of soft skills that they didn&rsquo;t prepare me for in college. At no point in my undergrad or masters programs did my instructors tell me that I&rsquo;d have to tell people no. Learning that lesson took real on-the-job experience. Today, I&rsquo;d like to talk about the relationship between product managers and UX designers.</p>
<h2 id="the-relationship">The Relationship</h2>
<p>During my time as a Senior User Experience Designer, I&rsquo;ve worked closely with several key stakeholders for each of my projects. Typically, I work with one to two product managers per project. The way that exchange happens looks like this.</p>
<ol>
<li>Product brings new feature to UX.</li>
<li>UX examines feature and decides how to implement it.</li>
<li>UX designs the feature and takes it through various governance reviews (accessibility, legal, design, etc).</li>
<li>UX delivers to Product.</li>
<li>Product takes the flow and designs to dev to be built.</li>
<li>Dev builds the feature.</li>
<li>Dev demonstrates the feature to UX for final approval.</li>
<li>Feature is pushed to production.</li>
</ol>
<p>This process works like a well-oiled machine when product brings a well-organized plan to UX for collaboration. In an ideal world, every feature would involve UX in the very early stages of the product development life cycle. Unfortunately, this doesn&rsquo;t always happen the way we want it to. In my experience, the trouble happens between steps 1 and 2 in the above list.</p>
<h2 id="the-problem">The Problem</h2>
<p>I find that my team often does pretty mediocre work when product is <strong>prescriptive rather than descriptive</strong>. Unfortunately, some of my product partners think of UX as a &ldquo;screen factory.&rdquo; In their mind, they&rsquo;ve already decided what the feature is going to look like. They just need UX to make a click-through prototype to send to dev. Easy peasy, right? Not really. Typically, this creates a lot of friction between product and UX. I&rsquo;d like to examine a great example that happened to me this year.</p>
<p>Product wanted to add a feature to an admin dashboard. They wanted a temporary warning to alert the administrator that any changes made to a certain field would not be realized because of the special state that was currently affecting the user. In simple terms, two users may accidentally have the same compound identifier and therefor changing one of their data points would change the other&rsquo;s as well. Product said that, to implement this feature, they wanted an error message to display on the data field in the edit flow. I pushed back saying that we only use error messages to indicate that the user has made an invalid entry and cannot continue until that entry is resolved. The problem is that product <em>insisted</em> that this was the only way it could be done. They said they only had enough capacity in the upcoming sprint to perform this implementation. We went back and forth on this for nearly a week until I told them that they would need to go to my director to get this approved. The deviation from the style guide was so dramatic that I didn&rsquo;t feel comfortable putting my name on it - even with product&rsquo;s signature on the design. Another week later, product came back and folded. We had to get the product manager&rsquo;s manager involved to get the feature updated. It took over two weeks longer than it needed to as a result.</p>
<h2 id="the-solution">The Solution</h2>
<p>My team does our best work when product brings us in early. And I don&rsquo;t necessarily mean early from a time perspective (though that&rsquo;s greatly appreciated too). UX truly shines when product involves us from the feature elaboration stage. Ultimately, there shouldn&rsquo;t be an adversarial relationship between UX and product. Rather, it should be a partnership. We&rsquo;re truly able to perform when we both play to our strengths. Ideation and interaction design aren&rsquo;t product&rsquo;s strengths anymore than Gantt charts and understanding technical implementations are UX&rsquo;s. As an example of when things go right, I&rsquo;d like to reflect on developing the feature that fixed the need for the warning from the last example.</p>
<p>To solve this compound key entanglement issue, we built a new compound key that uses unique identifiers. The challenge for product and UX was that the old accounts without the new key would still be in the system. Product explained to us that, due to a technical limitation in the database, we wouldn&rsquo;t be able to just lift and shift the existing users into the new system. They&rsquo;d effectively have to get phased out when their accounts close over the next year or so. But in the meantime, we&rsquo;d need to solve for users that mistype their ID during the sign-up phase. Product suggested that we have users enter their ID up <em>three times</em> depending on various factors. Obviously having a user enter the same piece of hard-to-remember information on three separate pages is a no-go, so we explored alternative options. Our resolution was to have the user enter their ID twice on a single page to prevent mistypes. We wanted to make a decision founded in data, but product reported that they didn&rsquo;t have a number for how frequently ID mistypes occur (an article for another day), so we did some math. We found that the likelihood of a user entering their ID wrong such that it matches another user&rsquo;s ID while the two user&rsquo;s have the same secondary key is so exceptionally small, that it&rsquo;s effectively zero. 2^-9 % of the time. 0.000000002% of entries would be collisions if every entry is a mistype. We found it was safe to say this was basically zero. As such, we pitched our case to risk and got the green light to proceed. As a result, we made a more delightful experience for hundreds of thousands of people. This would not have been possible if product built their engineering solution around the multiple entries method.</p>
<p>In summary, UX and product should be partners, not adversaries. We&rsquo;re two halves of the same whole.</p>
]]></content>
        </item>
        
        <item>
            <title>Deploy Hugo Site to cPanel</title>
            <link>https://thacher.me/posts/deploy-hugo-site-to-cpanel/</link>
            <pubDate>Wed, 31 Aug 2022 12:46:01 -0400</pubDate>
            
            <guid>https://thacher.me/posts/deploy-hugo-site-to-cpanel/</guid>
            <description>This website is built using a technology called Hugo. Hugo is brilliant because you can write as little or as much html, css, and js as you want. Written in Go, Hugo is a lightweight and immensely fast static site generator. Think Wordpress, but using Markdown instead of PHP. Well I love it and I&amp;rsquo;ve committed to using it for my personal site. Now that I have a few weeks&amp;rsquo; experience under my belt, it&amp;rsquo;s time to get serious about deployment and organization.</description>
            <content type="html"><![CDATA[<p>This website is built using a technology called <a href="https://gohugo.io/">Hugo</a>. Hugo is brilliant because you can write as little or as much html, css, and js as you want. Written in <a href="https://go.dev/">Go</a>, Hugo is a lightweight and immensely fast static site generator. Think Wordpress, but using Markdown instead of PHP. Well I love it and I&rsquo;ve committed to using it for my personal site. Now that I have a few weeks&rsquo; experience under my belt, it&rsquo;s time to get serious about deployment and organization. And yes, that means no more drag and drop onto Cyberduck. One of the tradeoffs of using Hugo over something like Wordpress is that it doesn&rsquo;t come with any deployment tools or web host integrations. So if you&rsquo;d like to get your generated web documents onto your host, you have to do it all manually. Or&hellip; you could automate it using GitHub workflows. At this point, you can probably guess where this is going. Let&rsquo;s get started!</p>
<h2 id="step-1-git-init">Step 1: git init</h2>
<p>Initialize a git repo in the <em>/public</em> folder of your Hugo site directory. If you host anything else where you&rsquo;ll be deploying your hugo site, add those directories to your gitignore. Make a matching repo on GitHub. Add your files, commit, push.</p>
<h2 id="step-2-ftp-accounts">Step 2: FTP Accounts</h2>
<p>Create a new FTP account on cPanel. Give it a username and password that you&rsquo;ll remember and tell it where the root directory should be. In my case, I am deploying directly to the <strong>public_html</strong> folder. If you&rsquo;re using an add-on domain, make sure you use the root folder of your add-on domain.</p>

    <img src="/images/dev-posting/createFtpAccount.png"  alt="FTP Account Creation"  class="center"  style="maximum-height: 600px;"  />


<h2 id="step-3-secrets">Step 3: Secrets</h2>
<p>Add the FTP server address, username, and password to your git repo&rsquo;s secrets at Settings &gt; Secrets &gt; Action Secrets</p>

    <img src="/images/dev-posting/addRepoSecrets.png"  alt="FTP Account Creation"  class="center"  style="maximum-height: 600px;"  />


<p> </p>

    <img src="/images/dev-posting/enterSecrets.png"  alt="FTP Account Creation"  class="center"  style="maximum-height: 600px;"  />


<h2 id="step-4-workflow">Step 4: Workflow</h2>
<p>Create a workflow on GitHub at Actions &gt; set up a workflow yourself.</p>

    <img src="/images/dev-posting/createNewWorkflowGitHub.png"  alt="FTP Account Creation"  class="center"  style="maximum-height: 600px;"  />


<p> </p>

    <img src="/images/dev-posting/workflowYml.png"  alt="FTP Account Creation"  class="center"  style="maximum-height: 600px;"  />


<p> </p>
<p>Enter the following code into the yml file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Publish Website to CPanel</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">FTP-Deploy-Action</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">FTP-Deploy-Action</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2.1.0</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">FTP-Deploy-Action</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">SamKirkland/FTP-Deploy-Action@4.0.0</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">server</span>: <span style="color:#ae81ff">${{ secrets.FTP_SERVER }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">username</span>: <span style="color:#ae81ff">${{ secrets.FTP_USERNAME }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">password</span>: <span style="color:#ae81ff">${{ secrets.FTP_PASSWORD }}</span>
</span></span></code></pre></div><p>Click &ldquo;Start commit&rdquo; and commit the new workflow file to the repo.</p>
<h2 id="step-5-test">Step 5: Test</h2>
<p>Now, when you push any changes to the repo from your code editor, the changes will be reflected on you hosting platform within a few seconds. In my testing, I find it takes anywhere form 10 seconds to a minute for the workflow to finish running. I would imagine this time increases as the changes get bigger.</p>
<p>Go ahead and run &ldquo;hugo&rdquo; from your site&rsquo;s project folder and then add and commit the changes from the <em>/public</em> folder once the build completes. When you push your changes, look at the workflow in the Actions tab on your GitHub repo. You should see the workflow in progress as your updates push to your host.</p>
<p>Congrats! You&rsquo;re now a devops engineer.</p>
<h2 id="may-2023-update">May, 2023 Update</h2>
<p>There was an issue with FTP Deploy v3.1.1, so I&rsquo;ve updated my action script to 4.0.0. With this change, you also need to update your &ldquo;with&rdquo; params. The code block above is working as of May 28, 2023</p>
]]></content>
        </item>
        
    </channel>
</rss>
